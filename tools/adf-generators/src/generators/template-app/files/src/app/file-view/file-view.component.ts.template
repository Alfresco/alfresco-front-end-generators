import { Component, OnInit, ViewEncapsulation } from '@angular/core';
import { ActivatedRoute, PRIMARY_OUTLET, Router } from '@angular/router';
import {
  ContentMetadataCardComponent,
  FileUploadErrorEvent,
  NodeCommentsComponent,
  NodesApiService,
  VersionManagerComponent,
} from '@alfresco/adf-content-services';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatIcon } from '@angular/material/icon';
import {
  InfoDrawerComponent,
  InfoDrawerTabComponent,
  ViewerComponent,
  ViewerToolbarActionsComponent,
} from '@alfresco/adf-core';
import { TranslatePipe } from '@ngx-translate/core';
import { MatCard, MatCardContent } from '@angular/material/card';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-file-view',
  templateUrl: 'file-view.component.html',
  styleUrls: ['file-view.component.scss'],
  encapsulation: ViewEncapsulation.None,
  standalone: true,
  imports: [
    NodeCommentsComponent,
    CommonModule,
    ContentMetadataCardComponent,
    InfoDrawerComponent,
    InfoDrawerTabComponent,
    MatCard,
    MatCardContent,
    MatIcon,
    TranslatePipe,
    ViewerComponent,
    ViewerToolbarActionsComponent,
    VersionManagerComponent,
  ]
})
export class FileViewComponent implements OnInit {
  nodeId: string = null;

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private snackBar: MatSnackBar,
    private nodeApiService: NodesApiService,
  ) {}

  ngOnInit() {
    this.route.params.subscribe((params) => {
      const id = params.nodeId;
      if (id) {
        this.nodeApiService.getNode(id).subscribe(
          (node) => {
            if (node && node.isFile) {
              this.nodeId = id;
              return;
            }
            this.router.navigate(['/files', id]);
          },
          () => this.router.navigate(['/files', id]),
        );
      }
    });
  }

  onUploadError(errorMessage: FileUploadErrorEvent) {
    this.snackBar.open(errorMessage?.error?.message, '', { duration: 4000 });
  }

  onViewerVisibilityChanged() {
    const primaryUrl = this.router
      .parseUrl(this.router.url)
      .root.children[PRIMARY_OUTLET].toString();
    this.router.navigateByUrl(primaryUrl);
  }
}
